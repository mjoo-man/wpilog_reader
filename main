from fileOps import *

import pandas as pd
import os
import numpy as np
import matplotlib.pyplot as plt
import sys
# define a small function to get an idea of how the code is running
def update_progress(job_title, progress):
    length = 20 # modify this to change the length
    block = int(round(length*progress))
    msg = "\r{0}: [{1}] {2}%".format(job_title, "#"*block + "-"*(length-block),
                round(progress*100, 2))
    if progress >= 1: msg += " DONE\r\n"
    sys.stdout.write(msg)
    sys.stdout.flush()
    return

def backfill(dataframe, headers):
    # find all the NaN
    mask = dataframe.isna()
    
    progress = 0
    # for all columns fill in the NaN (True) with the previous number start w zero
    for h in headers:
        
        col = dataframe[h]
        sub_val = 0.0
        for i in range(len(col)):
            # update_progress(f"Backfilling column {progress}", i/len(col))
            if mask[h].iat[i]:
                # if it is NaN sud the value
                dataframe[h].iat[i] = sub_val
            else:
                # if not NaN get most recent value
                sub_val = dataframe[h].iat[i]
        progress += 1
    return dataframe
    



def main():
	
    # get the directory of the logs to be analyzed
    log_dir = getFilePath("Select Folder with the Logs")

    os.chdir(log_dir)
    # for development use
    # log_dir = r"C:\Users\Micah\Desktop\7_28_rolling tests"
    
    filenames = getCSVFiles(log_dir)
    
    simple_headers = ['Ball Pressure (psi)', 'Ball Pressure MPRLS (psi)', 'Commanded Drive Velocity', 'Commanded Steer Position', 'Drive Angle', 'Drive Velocity', 'Pend Angle', 'Pitch Speed', 'Steer Position', 'Steer Velocity', 'cmdDriveVel', 'drive speed', 'systemTime']

    for file in filenames:
        # just read the headers of each file 
        headers = pd.read_csv(file, index_col=0, nrows=0).columns.tolist()
        # print(headers)
        # read data in the enabled disabled
        run_data = pd.read_csv(file, index_col=0) # timestamp is the index

        fill_data = backfill(run_data, headers)

        #title the file after the first file picked and add merged
        newName = os.path.basename(file).split(".")[0] + '-filled.csv'
        fill_data.to_csv(newName)
         # get rid of some crap 
        # for i in range(len(headers)):
        #     headers[i] = headers[i].replace("NT:/SmartDashboard/", "")
        # print(headers)
        '''
        Heres where i think this is going:

        I need to find a way to loop through enable disable cycles using the first hearer column
        then store data one it trips True (ignoring NANs) sine the robot in enabled
        ^^ that wont work bc tere is no enabled flag

        it looks like i just need to individually plot and tailor each file, ugh
        then plot that data

        
        paybe add functionality to save that data stream if its good enough from the plot

        Data to plot:
         - pipe angle
         - pendulum angle
         - cmd pipe angle

         - drive angle
         - commanded drive angle

         - speeds

         - export to csv for combining with the LQR simulations
         (need to fiue out a good way to trim data in pandas - does that exist??)

        '''

       
        
        

main()